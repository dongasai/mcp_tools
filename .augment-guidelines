# MCP Tools 项目开发指南

## 项目概述
- 这是一个基于 Model Context Protocol (MCP) 的项目，使用 Laravel 11 和 SSE (Server-Sent Events) 提供实时 MCP 服务
- 专注于提供不依赖 Node.js 的 MCP 服务，仅使用 PHP Laravel 实现 SSE
- 项目实现了 Agent 访问控制和身份识别系统，用于跟踪哪个 Agent 处理特定任务

## 技术栈偏好
- **后端框架**: Laravel 11 with PHP 8.2+
- **MCP 协议**: 基于 Server-Sent Events (SSE) 实现，无 Node.js 依赖
- **管理界面**: dcat/laravel-admin 构建双后台系统
- **数据验证**: inhere/php-validate 包，Validation 和 Validator 分离
- **数据库**: 兼容 SQLite， MySQL8.0+
- **实时通信**: 纯 PHP SSE 实现配合 ReactPHP

## 开发工作流偏好
- 始终使用包管理器（composer、npm）而非手动编辑配置文件
- 在单独的 'laravel' 目录中初始化 Laravel 项目，然后逐步添加依赖
- 遵循模块化开发方法，在 docs 目录创建模块规划文档
- 使用浏览器测试网页修改，使用 MCP 执行 SQL
- 在一个工作任务完成后，使用git提交代码
- 创建任务记录：`./AiWork/年月/日时分-任务标题.md`
- 项目已经使用docker运行，访问地址：http://127.0.0.1:34004
- mcp测试工具已经运行，访问地址：http://localhost:6274/
- 本项目运行的MCP已加入到你的可用mcp中，名为'testme'

## 架构设计原则
- **双后台架构**:
  - 超级管理员后台 (/super-admin) 用于系统级管理，采用dcat-admin构建
  - 用户后台 (/user-admin) 用于个人项目/任务/Agent 管理，采用dcat-admin构建
- **任务层次**: 主任务由用户管理，子任务由 Agent 自主创建和维护
- **MCP 协议专注**: 专门用于任务处理，不管理用户
- **Agent 访问控制**: 项目级权限和细粒度操作控制
- 没有API,没有Restful APi

## 代码质量标准
- 简化 Validation 和 Validator 实现，不使用服务包装器
- 使用直接验证方法而非复杂的服务包装实现
- 保持 Validation 和 Validator 组件分离
- 文档专注于架构设计而非具体代码实现
- 枚举采用`enum`语法，全大写下划线命名

## 文档编写规范
- 从文档中移除具体代码实现
- 专注于架构设计和功能描述
- 采用概念优先、场景驱动的编写方式
- 维护统一的文档结构和格式规范
- 记录开发状态和进度跟踪


## 包集成要求
- php-mcp/laravel 用于 MCP 协议支持
- inhere/php-validate 用于数据验证
- 避免 Node.js 依赖，使用纯 PHP 解决方案

## 文件管理偏好
- 在 'AiWork/now.md' 中维护当前工作状态并定期更新
- 任务开始前加载偏好设置
- 完成当前工作后阅读 'Task List' 和 'AiWork/now.md' 查找新任务

## 测试要求
- 为所有新功能编写单元测试和功能测试
- 确保网页界面的浏览器兼容性
- 使用phpunit进行请求测试，而不是curl

## 安全考虑
- 实现 Agent 身份认证，使用唯一标识符和访问令牌
- 强制执行项目级权限控制以访问资源
- 维护权限变更的操作审计日志
- 验证所有输入数据并实现访问频率限制