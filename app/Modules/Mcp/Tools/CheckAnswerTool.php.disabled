<?php

// TEMPORARILY DISABLED - Interface issues
// namespace App\Modules\Mcp\Tools;

use App\Modules\Agent\Services\QuestionService;
use App\Modules\Agent\Services\AgentService;
use App\Modules\Core\Contracts\LogInterface;
use PhpMcp\Laravel\Contracts\ToolInterface;
use PhpMcp\Laravel\Contracts\ToolCallInterface;
use PhpMcp\Laravel\Contracts\ToolResultInterface;
use PhpMcp\Laravel\ToolResult;
use PhpMcp\Laravel\TextContent;

class CheckAnswerTool implements ToolInterface
{
    public function __construct(
        private QuestionService $questionService,
        private AgentService $agentService,
        private LogInterface $logger
    ) {}

    public function getName(): string
    {
        return 'check_answer';
    }

    public function getDescription(): string
    {
        return '检查问题是否已被回答，获取问题的当前状态和回答内容';
    }

    public function getInputSchema(): array
    {
        return [
            'type' => 'object',
            'properties' => [
                'question_id' => [
                    'type' => 'integer',
                    'description' => '问题ID',
                ],
            ],
            'required' => ['question_id'],
        ];
    }

    public function call(ToolCallInterface $call): ToolResultInterface
    {
        try {
            $arguments = $call->getArguments();
            
            // 获取当前Agent信息
            $agentId = $this->getAgentIdFromCall($call);
            if (!$agentId) {
                return new ToolResult([
                    new TextContent('错误：无法获取Agent身份信息')
                ], true);
            }

            $agent = $this->agentService->findByIdentifier($agentId);
            if (!$agent) {
                return new ToolResult([
                    new TextContent('错误：Agent不存在')
                ], true);
            }

            // 获取问题
            $questionId = $arguments['question_id'];
            $question = $this->questionService->getQuestionById($questionId);

            if (!$question) {
                return new ToolResult([
                    new TextContent('错误：问题不存在')
                ], true);
            }

            // 验证问题是否属于当前Agent
            if ($question->agent_id !== $agent->id) {
                return new ToolResult([
                    new TextContent('错误：无权访问此问题')
                ], true);
            }

            // 准备返回数据
            $result = [
                'success' => true,
                'question_id' => $question->id,
                'title' => $question->title,
                'content' => $question->content,
                'question_type' => $question->question_type,
                'question_type_label' => $question->getTypeLabel(),
                'priority' => $question->priority,
                'priority_label' => $question->getPriorityLabel(),
                'status' => $question->status,
                'status_label' => $question->getStatusLabel(),
                'is_pending' => $question->isPending(),
                'is_answered' => $question->isAnswered(),
                'is_ignored' => $question->isIgnored(),
                'is_expired' => $question->isExpired(),
                'created_at' => $question->created_at->toISOString(),
                'expires_at' => $question->expires_at?->toISOString(),
            ];

            // 如果问题已回答，包含回答信息
            if ($question->isAnswered()) {
                $result['answer'] = [
                    'content' => $question->answer,
                    'type' => $question->answer_type,
                    'answered_at' => $question->answered_at->toISOString(),
                    'answered_by' => $question->answeredBy ? [
                        'id' => $question->answeredBy->id,
                        'name' => $question->answeredBy->name,
                        'email' => $question->answeredBy->email,
                    ] : null,
                ];
            } else {
                $result['answer'] = null;
            }

            // 包含上下文和选项信息
            $result['context'] = $question->context;
            $result['answer_options'] = $question->answer_options;

            // 包含关联信息
            if ($question->task_id) {
                $result['task'] = [
                    'id' => $question->task->id,
                    'title' => $question->task->title,
                ];
            }

            if ($question->project_id) {
                $result['project'] = [
                    'id' => $question->project->id,
                    'name' => $question->project->name,
                ];
            }

            $this->logger->info('Question status checked via MCP', [
                'question_id' => $questionId,
                'agent_id' => $agentId,
                'status' => $question->status,
            ]);

            return new ToolResult([
                new TextContent(json_encode($result, JSON_UNESCAPED_UNICODE))
            ]);

        } catch (\Exception $e) {
            $this->logger->error('Failed to check question answer', [
                'error' => $e->getMessage(),
                'arguments' => $arguments ?? [],
            ]);

            return new ToolResult([
                new TextContent('错误：检查问题状态失败 - ' . $e->getMessage())
            ], true);
        }
    }

    /**
     * 从调用中获取Agent ID
     */
    private function getAgentIdFromCall(ToolCallInterface $call): ?string
    {
        // 这里需要从MCP调用上下文中获取Agent ID
        // 具体实现取决于MCP框架如何传递认证信息
        
        // 临时实现：从请求中获取
        $request = request();
        return $request->header('X-Agent-ID') ?? $request->attributes->get('mcp_agent_id');
    }
}
