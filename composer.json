{
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": ["laravel", "framework"],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "dongasai/dcat-admin2": "11.*",
        "laravel/framework": "^11.31",
        "laravel/tinker": "^2.9",
        "php-mcp/laravel": "^3.0"
    },
    "require-dev": {
        "codeception/codeception": "^5.0",
        "codeception/module-laravel": "^3.0",
        "codeception/module-webdriver": "^3.0",
        "codeception/module-db": "^3.0",
        "codeception/module-asserts": "^3.0",
        "codeception/module-phpbrowser": "^3.0",
        "fakerphp/faker": "^1.23",
        "laravel/pail": "^1.1",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.26",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.1",
        "phpunit/phpunit": "^11.0.1"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve --port=34004\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ],
        "project-init": [
            "echo '🚀 MCP Tools 项目初始化开始...'",
            "@php -r \"echo '📋 检查环境要求...\\n';\"",
            "@php -r \"echo 'PHP 版本: ' . PHP_VERSION . '\\n';\"",
            "@php -r \"echo '检查必需扩展...\\n';\"",
            "@php -r \"\\$required = array('pdo', 'pdo_sqlite', 'mbstring', 'openssl', 'tokenizer', 'xml', 'ctype', 'json', 'bcmath', 'fileinfo'); foreach(\\$required as \\$ext) { echo (\\$ext . ': ' . (extension_loaded(\\$ext) ? '✅' : '❌') . '\\n'); }\"",
            "@php -r \"echo '\\n📁 设置环境配置...\\n';\"",
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\"",
            "@php -r \"echo '.env 文件已创建\\n';\"",
            "@php artisan key:generate --ansi",
            "@php -r \"echo '\\n🗄️ 初始化数据库...\\n';\"",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php -r \"echo 'SQLite 数据库文件已创建\\n';\"",
            "@php artisan migrate --graceful --ansi",
            "@php -r \"echo '\\n🌱 运行数据库种子...\\n';\"",
            "@php artisan db:seed --ansi || echo '初始数据填充完成'",
            "@php -r \"echo '\\n📦 发布资源文件...\\n';\"",
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force",
            "@php artisan vendor:publish --tag=dcat-admin-config --ansi",
            "@php artisan vendor:publish --tag=dcat-admin-lang --ansi",
            "@php artisan vendor:publish --tag=dcat-admin-views --ansi",
            "@php -r \"echo '\\n🔧 优化应用...\\n';\"",
            "@php artisan config:cache",
            "@php artisan view:cache",
            "@php -r \"echo '\\n📁 创建必要目录...\\n';\"",
            "@php -r \"!is_dir('storage/logs') && mkdir('storage/logs', 0755, true);\"",
            "@php -r \"!is_dir('storage/app/public') && mkdir('storage/app/public', 0755, true);\"",
            "@php -r \"!is_dir('storage/framework/cache') && mkdir('storage/framework/cache', 0755, true);\"",
            "@php -r \"!is_dir('storage/framework/sessions') && mkdir('storage/framework/sessions', 0755, true);\"",
            "@php -r \"!is_dir('storage/framework/views') && mkdir('storage/framework/views', 0755, true);\"",
            "@php artisan storage:link",
            "@php -r \"echo '\\n🔐 设置权限...\\n';\"",
            "@php -r \"chmod('storage', 0775); chmod('bootstrap/cache', 0775);\"",
            "@php -r \"echo '\\n✅ 项目初始化完成!\\n\\n';\"",
            "@php -r \"echo '📚 更多信息请查看 docs/ 目录\\n';\""
        ],
        "uninit": [
            "echo '🧹 MCP Tools 项目清理开始...'",
            "@php -r \"echo '⚠️  警告: 此操作将删除数据库和环境配置文件\\n';\"",
            "@php -r \"echo '正在清理数据库文件...\\n';\"",
            "@php -r \"if(file_exists('database/database.sqlite')) { unlink('database/database.sqlite'); echo 'SQLite 数据库文件已删除\\n'; }\"",
            "@php -r \"echo '正在清理环境配置文件...\\n';\"",
            "@php -r \"if(file_exists('.env')) { unlink('.env'); echo '.env 文件已删除\\n'; }\"",
            "@php -r \"echo '正在清理缓存文件...\\n';\"",
            "@php artisan config:clear || echo '配置缓存清理完成'",
            "@php artisan route:clear || echo '路由缓存清理完成'",
            "@php artisan view:clear || echo '视图缓存清理完成'",
            "@php artisan cache:clear || echo '应用缓存清理完成'",
            "@php -r \"echo '正在清理存储链接...\\n';\"",
            "@php -r \"if(is_link('public/storage')) { unlink('public/storage'); echo '存储链接已删除\\n'; }\"",
            "@php -r \"echo '正在清理日志文件...\\n';\"",
            "@php -r \"array_map('unlink', glob('storage/logs/*.log'));\"",
            "@php -r \"echo '✅ 项目清理完成!\\n\\n';\"",
            "@php -r \"echo '💡 提示:\\n';\"",
            "@php -r \"echo '   重新初始化项目: composer run project-init\\n';\"",
            "@php -r \"echo '   查看项目状态: git status\\n';\""
        ],
        "codecept": [
            "Composer\\Config::disableProcessTimeout",
            "php vendor/bin/codecept run"
        ],
        "codecept-build": [
            "php vendor/bin/codecept build"
        ],
        "codecept-gui": [
            "php artisan serve --port=8000 &",
            "php vendor/bin/codecept run acceptance --env chrome"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "dev",
    "prefer-stable": true
}
